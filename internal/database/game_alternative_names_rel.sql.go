// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: game_alternative_names_rel.sql

package database

import (
	"context"
)

const createGameAlternativeNameRel = `-- name: CreateGameAlternativeNameRel :one
INSERT INTO games_alternative_names_rel (
    game_id, alternative_name_id, created_at, updated_at
) VALUES (
    $1,
    $2,
    NOW(),
    NOW()
)
RETURNING game_id, alternative_name_id, created_at, updated_at
`

type CreateGameAlternativeNameRelParams struct {
	GameID            int32
	AlternativeNameID int32
}

func (q *Queries) CreateGameAlternativeNameRel(ctx context.Context, arg CreateGameAlternativeNameRelParams) (GamesAlternativeNamesRel, error) {
	row := q.db.QueryRowContext(ctx, createGameAlternativeNameRel, arg.GameID, arg.AlternativeNameID)
	var i GamesAlternativeNamesRel
	err := row.Scan(
		&i.GameID,
		&i.AlternativeNameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllGameAlternativeNameRel = `-- name: DeleteAllGameAlternativeNameRel :exec
DELETE FROM games_alternative_names_rel
`

func (q *Queries) DeleteAllGameAlternativeNameRel(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllGameAlternativeNameRel)
	return err
}
