// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: games.sql

package database

import (
	"context"
	"database/sql"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (
    id, created_at, updated_at, first_release_date, name, parent_game,
    slug, storyline, summary, url, version_parent, version_title
) VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    NULL,
    $4,
    $5,
    $6,
    $7,
    NULL,
    $8
)
RETURNING id, created_at, updated_at, first_release_date, name, parent_game, slug, storyline, summary, url, version_parent, version_title
`

type CreateGameParams struct {
	ID               int32
	FirstReleaseDate sql.NullInt64
	Name             string
	Slug             sql.NullString
	Storyline        sql.NullString
	Summary          sql.NullString
	Url              sql.NullString
	VersionTitle     sql.NullString
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame,
		arg.ID,
		arg.FirstReleaseDate,
		arg.Name,
		arg.Slug,
		arg.Storyline,
		arg.Summary,
		arg.Url,
		arg.VersionTitle,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstReleaseDate,
		&i.Name,
		&i.ParentGame,
		&i.Slug,
		&i.Storyline,
		&i.Summary,
		&i.Url,
		&i.VersionParent,
		&i.VersionTitle,
	)
	return i, err
}

const deleteAllGames = `-- name: DeleteAllGames :exec
DELETE FROM games
`

func (q *Queries) DeleteAllGames(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllGames)
	return err
}

const getGameById = `-- name: GetGameById :one
SELECT id, created_at, updated_at, first_release_date, name, parent_game, slug, storyline, summary, url, version_parent, version_title
FROM games
WHERE id = $1
`

func (q *Queries) GetGameById(ctx context.Context, id int32) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameById, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstReleaseDate,
		&i.Name,
		&i.ParentGame,
		&i.Slug,
		&i.Storyline,
		&i.Summary,
		&i.Url,
		&i.VersionParent,
		&i.VersionTitle,
	)
	return i, err
}

const updateParentAndVersionParent = `-- name: UpdateParentAndVersionParent :exec
UPDATE games
SET parent_game = $2, version_parent = $3
WHERE id = $1
RETURNING id, created_at, updated_at, first_release_date, name, parent_game, slug, storyline, summary, url, version_parent, version_title
`

type UpdateParentAndVersionParentParams struct {
	ID            int32
	ParentGame    sql.NullInt32
	VersionParent sql.NullInt32
}

func (q *Queries) UpdateParentAndVersionParent(ctx context.Context, arg UpdateParentAndVersionParentParams) error {
	_, err := q.db.ExecContext(ctx, updateParentAndVersionParent, arg.ID, arg.ParentGame, arg.VersionParent)
	return err
}
