// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: platforms.sql

package database

import (
	"context"
	"database/sql"
)

const createPlatform = `-- name: CreatePlatform :one
INSERT INTO platforms (
    id, created_at, updated_at, abbreviation,
    generation, name, slug, summary, url
) VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, created_at, updated_at, abbreviation, generation, name, slug, summary, url
`

type CreatePlatformParams struct {
	ID           int32
	Abbreviation sql.NullString
	Generation   sql.NullInt32
	Name         string
	Slug         sql.NullString
	Summary      sql.NullString
	Url          sql.NullString
}

func (q *Queries) CreatePlatform(ctx context.Context, arg CreatePlatformParams) (Platform, error) {
	row := q.db.QueryRowContext(ctx, createPlatform,
		arg.ID,
		arg.Abbreviation,
		arg.Generation,
		arg.Name,
		arg.Slug,
		arg.Summary,
		arg.Url,
	)
	var i Platform
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Abbreviation,
		&i.Generation,
		&i.Name,
		&i.Slug,
		&i.Summary,
		&i.Url,
	)
	return i, err
}

const deleteAllPlatforms = `-- name: DeleteAllPlatforms :exec
DELETE FROM platforms
`

func (q *Queries) DeleteAllPlatforms(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllPlatforms)
	return err
}
