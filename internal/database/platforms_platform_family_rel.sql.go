// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: platforms_platform_family_rel.sql

package database

import (
	"context"
)

const createPlatformPlatformFamilyRel = `-- name: CreatePlatformPlatformFamilyRel :one
INSERT INTO platforms_platform_family_rel (
    platform_id, platform_family_id, created_at, updated_at
) VALUES (
    $1,
    $2,
    NOW(),
    NOW()
)
RETURNING platform_id, platform_family_id, created_at, updated_at
`

type CreatePlatformPlatformFamilyRelParams struct {
	PlatformID       int32
	PlatformFamilyID int32
}

func (q *Queries) CreatePlatformPlatformFamilyRel(ctx context.Context, arg CreatePlatformPlatformFamilyRelParams) (PlatformsPlatformFamilyRel, error) {
	row := q.db.QueryRowContext(ctx, createPlatformPlatformFamilyRel, arg.PlatformID, arg.PlatformFamilyID)
	var i PlatformsPlatformFamilyRel
	err := row.Scan(
		&i.PlatformID,
		&i.PlatformFamilyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllPlatformPlatformFamilyRel = `-- name: DeleteAllPlatformPlatformFamilyRel :exec
DELETE FROM platforms_platform_family_rel
`

func (q *Queries) DeleteAllPlatformPlatformFamilyRel(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllPlatformPlatformFamilyRel)
	return err
}
